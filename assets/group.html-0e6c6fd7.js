import{_ as a,p as e,q as h,a1 as r}from"./framework-943286ea.js";const d={},i=r('<h2 id="要成为一个好的前端架构师需要做的事情" tabindex="-1"><a class="header-anchor" href="#要成为一个好的前端架构师需要做的事情" aria-hidden="true">#</a> 要成为一个好的前端架构师需要做的事情：</h2><h3 id="了解业务" tabindex="-1"><a class="header-anchor" href="#了解业务" aria-hidden="true">#</a> 了解业务：</h3><p>全面调研当前业务和竞品的现状，充分理解当前渲染链路和节点，确认当前存在的问题</p><h3 id="寻找方案" tabindex="-1"><a class="header-anchor" href="#寻找方案" aria-hidden="true">#</a> 寻找方案：</h3><p>预估未来发展的方向，尽可能多的了解相关解决方案或创新自己的方案，比如：SSR，ER，预渲染，预加载，静态化等</p><h3 id="评估方案" tabindex="-1"><a class="header-anchor" href="#评估方案" aria-hidden="true">#</a> 评估方案：</h3><p>和相关同学讨论或开会，评估所有可行的方案及其合适度、复杂度、前瞻性和 ROI。选出至少一个候选方案，比如：SSR</p><h3 id="demo-开发" tabindex="-1"><a class="header-anchor" href="#demo-开发" aria-hidden="true">#</a> Demo 开发：</h3><p>基于现有开发能力为所有候选方案开发对应 Demo，提前探路并验证风险和可行性，帮助产出更合适的方案设计</p><h3 id="方案设计" tabindex="-1"><a class="header-anchor" href="#方案设计" aria-hidden="true">#</a> 方案设计：</h3><p>梳理清楚 SSR 完整链路上相关节点和合作方，多写、多画、多思考、多讨论相关架构和设计，深入细节产出 RFC 文档</p><h3 id="rfc-评审" tabindex="-1"><a class="header-anchor" href="#rfc-评审" aria-hidden="true">#</a> RFC 评审：</h3><p>充分评审设计、实现和产物细节，可多次评审直至所有成员达成共识。确定相关开发和团队分工，保证方案完善可执行</p><h3 id="落到实处" tabindex="-1"><a class="header-anchor" href="#落到实处" aria-hidden="true">#</a> 落到实处：</h3><p>推进项目开发，多与开发团队沟通，并至少参与一部分编码工作，打通所有相关开发和运维链路，保障产物简单好用</p><h3 id="沉淀传承" tabindex="-1"><a class="header-anchor" href="#沉淀传承" aria-hidden="true">#</a> 沉淀传承：</h3><p>沉淀文档，通过会议、分享或文章帮助其他人理解 SSR 方案和架构，用好 SSR。做好答疑，并推动方案实施 不断演进：关注 SSR 的发展，演进已有链路，比如，个性化的 SSR，结合 ER 的 SSR 等 从开发、构建发布到全量用户使用，从数据衡量到问题排查，我们交付了一个完整的 SSR 方案，其中处处有前端架构师的设计和影响。</p><p>前端架构师是否和你想象的有所不同？不仅仅要产出架构图，保证架构的正确执行，深入实现并至少要参与一部分编码工作，落实一个一个解决方案同时，前端架构师也要能阅读代码并经常与各个开发团队交流。可以说整个用户体验链路都有前端架构师的影子，他们了解用户体验；不设限，有审美能力，优雅；能看到其他人看不到的问题，也能解决一些其他人解决不了的问题；能够把复杂的系统想得清楚和透彻，也能够了解各个模块和环节；对未来发展有自己的思考和判断，并不断解决 DX 和 UX 相关问题。</p><h2 id="思考和总结" tabindex="-1"><a class="header-anchor" href="#思考和总结" aria-hidden="true">#</a> 思考和总结</h2><p>回顾过去的工作，得益于团队的信任及大前端的不断演进，我可以不断学习思考实践、权衡重构及与人打交道，令我非常愉悦，受益匪浅。严格来说我应该算个前端解决方案架构师，在前端架构的方向，我也还有很多需要发展和改善的地方，下面梳理下个人的思考和总结：我认为一个好的架构师，不仅技术要好，还要懂业务；能从整体设计架构，也能在局部实现功能。首先，技术好是成为架构师的基础条件。在平常的开发中，需要多注意让你的代码容易阅读和扩展，多想想是否有更好的实现方式，多参与代码审查工作。这样通过大量的编码实践，可以逐步地培养出好的架构思维。成为架构师后也要多写代码，如果不写代码，是不能体会出开发的痛点和设计不好带来的问题，无法及时地对架构中的问题做出调整，所设计的架构可能不实用，甚至甚脱离现实。</p><p>架构师不同于高级开发可以只追求技术的深度，还需要有一定的技术广度。因为技术的选型，通常不能局限于一种技术，需要根据业务特点和团队特点灵活地选择，是 “T”字形的成长模型：</p><h3 id="广度" tabindex="-1"><a class="header-anchor" href="#广度" aria-hidden="true">#</a> 广度：</h3><p>做技术方案时，要有多种选择，最好可以熟悉各个链路的关系</p><h3 id="深度" tabindex="-1"><a class="header-anchor" href="#深度" aria-hidden="true">#</a> 深度：</h3><p>要能解决一些别人搞不定的问题，至少也能指导从某个方向入手排查 其次，要充分理解业务并时刻关注业务变化，使架构不仅能够很好地支持业务特点，并具有一定的前瞻性。架构师需要站在推进业务发展的角度上合理地改进和优化架构设计，为业务的快速发展做好保障。做“合适”的架构非常重要，避免拿着锤子找钉子。</p><p>再者，要做一个靠谱并有良好的沟通和协调能力的人。架构师往往要面临着跨组、跨团队甚至跨 BU 的一些技术方案，需要在互相信任的前提下沟通和协调各方的诉求和冲突。好的架构师也可以让业务、技术、团队一起变得更好。</p><p>最后，我想说其实做架构设计，并不代表一定要有一个架构师的头衔。每个人都可以参与到架构设计中来，只要心中有大局有架构思维，能理解当前架构设计，不断更好的优化和执行，就能写出好代码做出好架构，提升整体的凝聚力和战斗力。</p><p>要想成为好的架构师，没有什么捷径可以走。持续的学习，不停的思考，多问为什么，多想想还能不能更好。愿大家都可以成为一个优秀靠谱的程序员、架构师。</p>',28),n=[i];function t(c,p){return e(),h("div",null,n)}const o=a(d,[["render",t],["__file","group.html.vue"]]);export{o as default};
