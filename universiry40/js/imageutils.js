THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(url,mapping,onLoad,onError){var loader=new THREE.ImageLoader;loader.crossOrigin=this.crossOrigin;var texture=new THREE.Texture(void 0,mapping);return loader.load(url,function(image){texture.image=image,texture.needsUpdate=!0,onLoad&&onLoad(texture)},void 0,function(event){onError&&onError(event)}),texture.sourceFile=url,texture},loadTextureCube:function(array,mapping,onLoad,onError){var loader=new THREE.ImageLoader;loader.crossOrigin=this.crossOrigin;var texture=new THREE.CubeTexture([],mapping);texture.flipY=!1;for(var loaded=0,loadTexture=function(i){loader.load(array[i],function(image){texture.images[i]=image,6===(loaded+=1)&&(texture.needsUpdate=!0,onLoad&&onLoad(texture))})},i=0,il=array.length;i<il;++i)loadTexture(i);return texture},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},getNormalMap:function(image,depth){var subtract=function(a,b){return[a[0]-b[0],a[1]-b[1],a[2]-b[2]]},normalize=function(a){var l=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/l,a[1]/l,a[2]/l]};depth|=1;var width=image.width,height=image.height,canvas=document.createElement("canvas");canvas.width=width,canvas.height=height;var context=canvas.getContext("2d");context.drawImage(image,0,0);for(var a,b,data=context.getImageData(0,0,width,height).data,imageData=context.createImageData(width,height),output=imageData.data,x=0;x<width;x++)for(var y=0;y<height;y++){var ly=y-1<0?0:y-1,uy=height-1<y+1?height-1:y+1,lx=x-1<0?0:x-1,ux=width-1<x+1?width-1:x+1,points=[],origin=[0,0,data[4*(y*width+x)]/255*depth];points.push([-1,0,data[4*(y*width+lx)]/255*depth]),points.push([-1,-1,data[4*(ly*width+lx)]/255*depth]),points.push([0,-1,data[4*(ly*width+x)]/255*depth]),points.push([1,-1,data[4*(ly*width+ux)]/255*depth]),points.push([1,0,data[4*(y*width+ux)]/255*depth]),points.push([1,1,data[4*(uy*width+ux)]/255*depth]),points.push([0,1,data[4*(uy*width+x)]/255*depth]),points.push([-1,1,data[4*(uy*width+lx)]/255*depth]);for(var normals=[],num_points=points.length,i=0;i<num_points;i++){var v1=points[i],v2=points[(i+1)%num_points];v1=subtract(v1,origin),v2=subtract(v2,origin),normals.push(normalize((b=v2,[(a=v1)[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]])))}var normal=[0,0,0];for(i=0;i<normals.length;i++)normal[0]+=normals[i][0],normal[1]+=normals[i][1],normal[2]+=normals[i][2];normal[0]/=normals.length,normal[1]/=normals.length,normal[2]/=normals.length;var idx=4*(y*width+x);output[idx]=(normal[0]+1)/2*255|0,output[idx+1]=(normal[1]+1)/2*255|0,output[idx+2]=255*normal[2]|0,output[idx+3]=255}return context.putImageData(imageData,0,0),canvas},generateDataTexture:function(width,height,color){for(var size=width*height,data=new Uint8Array(3*size),r=Math.floor(255*color.r),g=Math.floor(255*color.g),b=Math.floor(255*color.b),i=0;i<size;i++)data[3*i]=r,data[3*i+1]=g,data[3*i+2]=b;var texture=new THREE.DataTexture(data,width,height,THREE.RGBFormat);return texture.needsUpdate=!0,texture}};